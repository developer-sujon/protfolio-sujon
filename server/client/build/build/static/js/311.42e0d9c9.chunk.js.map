{"version":3,"file":"static/js/311.42e0d9c9.chunk.js","mappings":"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","sources":["APIRequest/RestClient.js","APIRequest/AuthRequest.js","components/Auth/LoginUser/LoginUser.jsx","helper/FormValidation.js","helper/ToastMessage.js"],"sourcesContent":["//External import\r\nimport axios from \"axios\";\r\nimport SessionHelper from \"../helper/SessionHelper\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport { SetLogout } from \"../redux/slices/AuthSlice\";\r\nimport { RemoveLoading, SetLoading } from \"../redux/slices/LoaderSlice\";\r\nimport { RemoveUserDetails } from \"../redux/slices/ProfileSlice\";\r\nimport store from \"../redux/store/store\";\r\n\r\n//Axios default setting\r\naxios.defaults.baseURL = \"/api/v1\";\r\naxios.defaults.headers.post[\"Content-Type\"] =\r\n  \"application/x-www-form-urlencoded\";\r\n\r\nfunction axiosHeaders() {\r\n  axios.defaults.headers.common[\"Authorization\"] =\r\n    \"Bearer \" + SessionHelper.getToken();\r\n}\r\n\r\nconst ResponseReturn = (response) => {\r\n  store.dispatch(RemoveLoading());\r\n  return response;\r\n};\r\n\r\nconst ErrorReturn = (error) => {\r\n  store.dispatch(RemoveLoading());\r\n  if (error.response.status === 500) {\r\n    ToastMessage.errorMessage(\"Sorry, Something went wrong\");\r\n  } else if (error.response.status === 401) {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n    store.dispatch(SetLogout());\r\n    store.dispatch(RemoveUserDetails());\r\n  } else {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nclass RestClient {\r\n  static async getRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .get(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async postRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .post(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        store.dispatch(RemoveLoading());\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async updateRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .patch(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async putRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .put(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async deleteRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .delete(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n}\r\n\r\nexport default RestClient;\r\n","//Internal Import\r\nimport store from \"../redux/store/store\";\r\nimport RestClient from \"./RestClient\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport { SetLogin } from \"../redux/slices/AuthSlice\";\r\n\r\nclass AuthRequest {\r\n  static async Login(postBody) {\r\n    const { data } = await RestClient.postRequest(\"/Auth/LoginUser\", postBody);\r\n    if (data) {\r\n      store.dispatch(SetLogin(data?.accessToken));\r\n      ToastMessage.successMessage(data?.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async Register(postBody) {\r\n    const { data } = await RestClient.postRequest(\r\n      \"/Auth/RegisterUser\",\r\n      postBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data?.message);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthRequest;\r\n","//External Import\r\nimport { useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Col, Row, Card, Form, Button } from \"react-bootstrap\";\r\n\r\n//Internal Import\r\nimport FormValidation from \"../../../helper/FormValidation\";\r\nimport ToastMessage from \"../../../helper/ToastMessage\";\r\nimport AuthRequest from \"../../../APIRequest/AuthRequest\";\r\n\r\nconst LoginUser = () => {\r\n  let passRef,\r\n    emailRef = useRef();\r\n\r\n  const SubmitLogin = (e) => {\r\n    e.preventDefault();\r\n    const email = emailRef.value;\r\n    const password = passRef.value;\r\n\r\n    if (!FormValidation.isEmail(email)) {\r\n      ToastMessage.errorMessage(\"Invalid Email Address\");\r\n    } else if (FormValidation.isEmpty(password)) {\r\n      ToastMessage.errorMessage(\"Password Is Required\");\r\n    } else {\r\n      AuthRequest.Login({ Email: email, Password: password });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md={7} lg={6} className=\"\" style={{ marginTop: \"100px\" }}>\r\n          <Card className=\"w-90 p-4\">\r\n            <Card.Body>\r\n              <Card.Title>Login Your Account</Card.Title>\r\n\r\n              <Form onSubmit={SubmitLogin}>\r\n                <Form.Group className=\"mb-3\" controlId=\"email\">\r\n                  <Form.Label>User Email Or Phone</Form.Label>\r\n                  <Form.Control\r\n                    ref={(input) => (emailRef = input)}\r\n                    placeholder=\"User Email Or Phone\"\r\n                    className=\"form-control animated fadeInUp\"\r\n                    type=\"text\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"password\">\r\n                  <Form.Label>User Password</Form.Label>\r\n                  <Form.Control\r\n                    ref={(input) => (passRef = input)}\r\n                    placeholder=\"User Password\"\r\n                    className=\"form-control animated fadeInUp\"\r\n                    type=\"password\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"success\"\r\n                  className=\"w-100 animated fadeInUp float-end\"\r\n                >\r\n                  Next\r\n                </Button>\r\n              </Form>\r\n\r\n              <div className=\"text-center w-100\">\r\n                <br />\r\n                <Link className=\"text-center animated fadeInUp\" to=\"/send-otp\">\r\n                  Forget Password\r\n                </Link>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LoginUser;\r\n","class FormValidation {\r\n  static isEmpty(value) {\r\n    return value.length <= 0;\r\n  }\r\n  static isEmail(value) {\r\n    let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    return regexEmail.test(value);\r\n  }\r\n  static isMobile(value) {\r\n    let regexMobile = /(^(\\+88|0088|88)?(01){1}[3456789]{1}(\\d){8})$/;\r\n    return regexMobile.test(value);\r\n  }\r\n}\r\n\r\nexport default FormValidation;\r\n","//external import\r\nimport cogoToast from \"cogo-toast\";\r\n\r\nclass ToastMessage {\r\n  static successMessage(msg) {\r\n    return cogoToast.success(msg, {\r\n      position: \"bottom-center\",\r\n    });\r\n  }\r\n  static errorMessage(msg) {\r\n    return cogoToast.error(msg, {\r\n      position: \"bottom-center\",\r\n    });\r\n  }\r\n}\r\n\r\nexport default ToastMessage;\r\n"],"names":["axiosHeaders","axios","SessionHelper","ResponseReturn","response","store","RemoveLoading","ErrorReturn","error","status","ToastMessage","data","message","SetLogout","RemoveUserDetails","RestClient","url","SetLoading","then","catch","postBody","AuthRequest","SetLogin","accessToken","passRef","emailRef","useRef","Container","Row","className","Col","md","lg","style","marginTop","Card","Form","onSubmit","e","preventDefault","email","value","password","FormValidation","Email","Password","controlId","ref","input","placeholder","type","Button","variant","to","length","test","msg","cogoToast","position"],"sourceRoot":""}
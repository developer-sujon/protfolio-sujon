{"version":3,"file":"static/js/407.01e2972d.chunk.js","mappings":"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","sources":["APIRequest/ProfileRequest.js","APIRequest/RestClient.js","components/AccountRecovery/SendOtp/SendOtp.jsx","helper/FormValidation.js","helper/ToastMessage.js"],"sourcesContent":["//Internal Import\r\nimport store from \"../redux/store/store\";\r\nimport RestClient from \"./RestClient\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport { SetUserDetails } from \"../redux/slices/ProfileSlice\";\r\nimport SessionHelper from \"../helper/SessionHelper\";\r\n\r\nclass ProfileRequest {\r\n  static async UserDetails() {\r\n    const { data } = await RestClient.getRequest(\"/user/UserDetails\");\r\n    if (data) {\r\n      store.dispatch(SetUserDetails(data?.[0]));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async UserUpdate(postBody) {\r\n    const { data } = await RestClient.updateRequest(\r\n      \"/user/UserUpdate\",\r\n      postBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async UserChecgePassword(postBody) {\r\n    const { data } = await RestClient.putRequest(\r\n      \"/user/UserChangePassword\",\r\n      postBody,\r\n    );\r\n\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async SendRecoveryOtp(email) {\r\n    const { data } = await RestClient.getRequest(\r\n      `/User/SendRecoveryOtp/${email}`,\r\n    );\r\n    if (data) {\r\n      SessionHelper.setOtpEmail(email);\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async VerifyRecoveryOtp(otp) {\r\n    const { data } = await RestClient.getRequest(\r\n      `/User/VerifyRecoveryOtp/${SessionHelper.getOtpEmail()}/${otp}`,\r\n    );\r\n\r\n    if (data) {\r\n      SessionHelper.setOtpCode(otp);\r\n      ToastMessage.successMessage(data.message);\r\n    }\r\n  }\r\n\r\n  static async RecoveryResetPass(Password) {\r\n    const { data } = await RestClient.postRequest(\r\n      `/User/RecoveryResetPass/${SessionHelper.getOtpEmail()}/${SessionHelper.getOtpCode()}`,\r\n      Password,\r\n    );\r\n\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ProfileRequest;\r\n","//External import\r\nimport axios from \"axios\";\r\nimport SessionHelper from \"../helper/SessionHelper\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport { SetLogout } from \"../redux/slices/AuthSlice\";\r\nimport { RemoveLoading, SetLoading } from \"../redux/slices/LoaderSlice\";\r\nimport { RemoveUserDetails } from \"../redux/slices/ProfileSlice\";\r\nimport store from \"../redux/store/store\";\r\n\r\n//Axios default setting\r\naxios.defaults.baseURL = \"/api/v1\";\r\naxios.defaults.headers.post[\"Content-Type\"] =\r\n  \"application/x-www-form-urlencoded\";\r\n\r\nfunction axiosHeaders() {\r\n  axios.defaults.headers.common[\"Authorization\"] =\r\n    \"Bearer \" + SessionHelper.getToken();\r\n}\r\n\r\nconst ResponseReturn = (response) => {\r\n  store.dispatch(RemoveLoading());\r\n  return response;\r\n};\r\n\r\nconst ErrorReturn = (error) => {\r\n  store.dispatch(RemoveLoading());\r\n  if (error.response.status === 500) {\r\n    ToastMessage.errorMessage(\"Sorry, Something went wrong\");\r\n  } else if (error.response.status === 401) {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n    store.dispatch(SetLogout());\r\n    store.dispatch(RemoveUserDetails());\r\n  } else {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nclass RestClient {\r\n  static async getRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .get(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async postRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .post(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        store.dispatch(RemoveLoading());\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async updateRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .patch(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async putRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .put(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async deleteRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .delete(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n}\r\n\r\nexport default RestClient;\r\n","//External lib Import\r\nimport { useRef } from \"react\";\r\nimport { Container, Col, Row, Card, Form, Button } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ProfileRequest from \"../../../APIRequest/ProfileRequest\";\r\n\r\n//Internal  lib import\r\nimport FormValidation from \"../../../helper/FormValidation\";\r\nimport ToastMessage from \"../../../helper/ToastMessage\";\r\n\r\nconst SendOtp = () => {\r\n  const navigate = useNavigate();\r\n  let emailRef = useRef();\r\n\r\n  const sendOtpCode = (e) => {\r\n    e.preventDefault();\r\n    if (!FormValidation.isEmail(emailRef.value)) {\r\n      ToastMessage.errorMessage(\"Invalid Email Address\");\r\n    } else {\r\n      ProfileRequest.SendRecoveryOtp(emailRef.value).then((result) => {\r\n        if (result) {\r\n          navigate(\"/verify-otp\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md={7} lg={6} style={{ marginTop: \"100px\" }}>\r\n          <Card className=\"w-90  p-4\">\r\n            <Card.Body>\r\n              <Card.Title>Email Address</Card.Title>\r\n              <Form onSubmit={sendOtpCode}>\r\n                <Form.Group className=\"mb-3\" controlId=\"passwordRef\">\r\n                  <Form.Control\r\n                    ref={(input) => (emailRef = input)}\r\n                    placeholder=\"Email Address\"\r\n                    className=\"animated fadeInUp\"\r\n                    type=\"email\"\r\n                  />\r\n                </Form.Group>\r\n                <Button\r\n                  variant=\"success\"\r\n                  type=\"submit\"\r\n                  className=\"w-100 animated fadeInUp float-end \"\r\n                >\r\n                  Next\r\n                </Button>\r\n              </Form>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SendOtp;\r\n","class FormValidation {\r\n  static isEmpty(value) {\r\n    return value.length <= 0;\r\n  }\r\n  static isEmail(value) {\r\n    let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    return regexEmail.test(value);\r\n  }\r\n  static isMobile(value) {\r\n    let regexMobile = /(^(\\+88|0088|88)?(01){1}[3456789]{1}(\\d){8})$/;\r\n    return regexMobile.test(value);\r\n  }\r\n}\r\n\r\nexport default FormValidation;\r\n","//external import\r\nimport cogoToast from \"cogo-toast\";\r\n\r\nclass ToastMessage {\r\n  static successMessage(msg) {\r\n    return cogoToast.success(msg, {\r\n      position: \"bottom-center\",\r\n    });\r\n  }\r\n  static errorMessage(msg) {\r\n    return cogoToast.error(msg, {\r\n      position: \"bottom-center\",\r\n    });\r\n  }\r\n}\r\n\r\nexport default ToastMessage;\r\n"],"names":["ProfileRequest","RestClient","data","store","SetUserDetails","postBody","ToastMessage","message","email","SessionHelper","otp","Password","axiosHeaders","axios","ResponseReturn","response","RemoveLoading","ErrorReturn","error","status","SetLogout","RemoveUserDetails","url","SetLoading","then","catch","navigate","useNavigate","emailRef","useRef","className","md","lg","style","marginTop","onSubmit","e","preventDefault","FormValidation","value","result","controlId","ref","input","placeholder","type","variant","length","test","msg","cogoToast","position"],"sourceRoot":""}
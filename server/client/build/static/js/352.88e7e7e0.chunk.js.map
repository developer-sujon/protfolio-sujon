{"version":3,"file":"static/js/352.88e7e7e0.chunk.js","mappings":"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","sources":["APIRequest/ProfileRequest.js","APIRequest/RestClient.js","components/User/ChangePassword/ChangePassword.jsx","helper/FormValidation.js","helper/ToastMessage.js"],"sourcesContent":["//Internal Import\r\nimport store from \"../redux/store/store\";\r\nimport RestClient from \"./RestClient\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport { SetUserDetails } from \"../redux/slices/ProfileSlice\";\r\nimport SessionHelper from \"../helper/SessionHelper\";\r\n\r\nclass ProfileRequest {\r\n  static async UserDetails() {\r\n    const { data } = await RestClient.getRequest(\"/user/UserDetails\");\r\n    if (data) {\r\n      store.dispatch(SetUserDetails(data?.[0]));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async UserUpdate(postBody) {\r\n    const { data } = await RestClient.updateRequest(\r\n      \"/user/UserUpdate\",\r\n      postBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async UserChecgePassword(postBody) {\r\n    const { data } = await RestClient.putRequest(\r\n      \"/user/UserChangePassword\",\r\n      postBody,\r\n    );\r\n\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async SendRecoveryOtp(email) {\r\n    const { data } = await RestClient.getRequest(\r\n      `/User/SendRecoveryOtp/${email}`,\r\n    );\r\n    if (data) {\r\n      SessionHelper.setOtpEmail(email);\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async VerifyRecoveryOtp(otp) {\r\n    const { data } = await RestClient.getRequest(\r\n      `/User/VerifyRecoveryOtp/${SessionHelper.getOtpEmail()}/${otp}`,\r\n    );\r\n\r\n    if (data) {\r\n      SessionHelper.setOtpCode(otp);\r\n      ToastMessage.successMessage(data.message);\r\n      return true\r\n    }\r\n  }\r\n\r\n  static async RecoveryResetPass(Password) {\r\n    const { data } = await RestClient.postRequest(\r\n      `/User/RecoveryResetPass/${SessionHelper.getOtpEmail()}/${SessionHelper.getOtpCode()}`,\r\n      Password,\r\n    );\r\n\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ProfileRequest;\r\n","//External import\r\nimport axios from \"axios\";\r\nimport SessionHelper from \"../helper/SessionHelper\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport { SetLogout } from \"../redux/slices/AuthSlice\";\r\nimport { RemoveLoading, SetLoading } from \"../redux/slices/LoaderSlice\";\r\nimport { RemoveUserDetails } from \"../redux/slices/ProfileSlice\";\r\nimport store from \"../redux/store/store\";\r\n\r\n//Axios default setting\r\naxios.defaults.baseURL = \"/api/v1\";\r\naxios.defaults.headers.post[\"Content-Type\"] =\r\n  \"application/x-www-form-urlencoded\";\r\n\r\nfunction axiosHeaders() {\r\n  axios.defaults.headers.common[\"Authorization\"] =\r\n    \"Bearer \" + SessionHelper.getToken();\r\n}\r\n\r\nconst ResponseReturn = (response) => {\r\n  store.dispatch(RemoveLoading());\r\n  return response;\r\n};\r\n\r\nconst ErrorReturn = (error) => {\r\n  store.dispatch(RemoveLoading());\r\n  if (error.response.status === 500) {\r\n    ToastMessage.errorMessage(\"Sorry, Something went wrong\");\r\n  } else if (error.response.status === 401) {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n    store.dispatch(SetLogout());\r\n    store.dispatch(RemoveUserDetails());\r\n  } else {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nclass RestClient {\r\n  static async getRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .get(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async postRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .post(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        store.dispatch(RemoveLoading());\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async updateRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .patch(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async putRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .put(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async deleteRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .delete(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n}\r\n\r\nexport default RestClient;\r\n","//External Lib Import\r\nimport { useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Container, Card, Row, Col, Form, Button } from \"react-bootstrap\";\r\n\r\n//Internal Lib Import\r\nimport FormValidation from \"../../../helper/FormValidation\";\r\nimport ToastMessage from \"../../../helper/ToastMessage\";\r\nimport ProfileRequest from \"../../../APIRequest/ProfileRequest\";\r\n\r\nconst ChangePassword = () => {\r\n  const navigate = useNavigate();\r\n\r\n  let previousPasswordRef,\r\n    newPasswordRef,\r\n    confirmNewPasswordRef = useRef();\r\n\r\n  const updatePassword = () => {\r\n    if (FormValidation.isEmpty(previousPasswordRef.value)) {\r\n      ToastMessage.errorMessage(\"Previous Password is Required\");\r\n    } else if (FormValidation.isEmpty(newPasswordRef.value)) {\r\n      ToastMessage.errorMessage(\"New Password is Required\");\r\n    } else if (FormValidation.isEmpty(confirmNewPasswordRef.value)) {\r\n      ToastMessage.errorMessage(\"Confirm Password is Required\");\r\n    } else if (newPasswordRef.value !== confirmNewPasswordRef.value) {\r\n      ToastMessage.errorMessage(\"New & Confirm Password Not Match\");\r\n    } else {\r\n      ProfileRequest.UserChecgePassword({\r\n        PreviousPassword: previousPasswordRef.value,\r\n        Password: newPasswordRef.value,\r\n      }).then((result) => {\r\n        if (result) {\r\n          navigate(\"/Profile\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row className=\"d-flex justify-content-center py-5\">\r\n        <Col md={6}>\r\n          <Card>\r\n            <Card.Body className=\"card-body\">\r\n              <Form.Group className=\"mb-3\" controlId=\"previousPasswordRef\">\r\n                <Form.Label>Previous Password</Form.Label>\r\n                <Form.Control\r\n                  key={Date.now()}\r\n                  ref={(input) => (previousPasswordRef = input)}\r\n                  placeholder=\"Previous Password\"\r\n                  className=\"form-control animated fadeInUp\"\r\n                  type=\"password\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3\" controlId=\"newPasswordRef\">\r\n                <Form.Label>New Password</Form.Label>\r\n                <Form.Control\r\n                  key={Date.now()}\r\n                  ref={(input) => (newPasswordRef = input)}\r\n                  placeholder=\"New Password\"\r\n                  className=\"form-control animated fadeInUp\"\r\n                  type=\"password\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3\" controlId=\"confirmNewPasswordRef\">\r\n                <Form.Label>Confirm New Password</Form.Label>\r\n                <Form.Control\r\n                  key={Date.now()}\r\n                  ref={(input) => (confirmNewPasswordRef = input)}\r\n                  placeholder=\"Confirm New Password\"\r\n                  className=\"form-control animated fadeInUp\"\r\n                  type=\"password\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Button\r\n                variant=\"success\"\r\n                className=\"w-100 float-end animated fadeInUp\"\r\n                onClick={updatePassword}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ChangePassword;\r\n","class FormValidation {\r\n  static isEmpty(value) {\r\n    return value.length <= 0;\r\n  }\r\n  static isEmail(value) {\r\n    let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    return regexEmail.test(value);\r\n  }\r\n  static isMobile(value) {\r\n    let regexMobile = /(^(\\+88|0088|88)?(01){1}[3456789]{1}(\\d){8})$/;\r\n    return regexMobile.test(value);\r\n  }\r\n}\r\n\r\nexport default FormValidation;\r\n","//external import\r\nimport cogoToast from \"cogo-toast\";\r\n\r\nclass ToastMessage {\r\n  static successMessage(msg) {\r\n    return cogoToast.success(msg, {\r\n      position: \"bottom-center\",\r\n    });\r\n  }\r\n  static errorMessage(msg) {\r\n    return cogoToast.error(msg, {\r\n      position: \"bottom-center\",\r\n    });\r\n  }\r\n}\r\n\r\nexport default ToastMessage;\r\n"],"names":["ProfileRequest","RestClient","data","store","SetUserDetails","postBody","ToastMessage","message","email","SessionHelper","otp","Password","axiosHeaders","axios","ResponseReturn","response","RemoveLoading","ErrorReturn","error","status","SetLogout","RemoveUserDetails","url","SetLoading","then","catch","previousPasswordRef","newPasswordRef","navigate","useNavigate","confirmNewPasswordRef","useRef","fluid","className","md","controlId","ref","input","placeholder","type","Date","now","variant","onClick","FormValidation","value","PreviousPassword","result","length","test","msg","cogoToast","position"],"sourceRoot":""}
{"version":3,"file":"static/js/399.64842065.chunk.js","mappings":"iOAcA,SAASA,IACPC,IAAAA,SAAAA,QAAAA,OAAAA,cACE,UAAYC,EAAAA,EAAAA,UAChB,CAPAD,IAAAA,SAAAA,QAAyB,UACzBA,IAAAA,SAAAA,QAAAA,KAAAA,gBACE,oCAOF,IAAME,EAAiB,SAACC,GAEtB,OADAC,EAAAA,EAAAA,UAAeC,EAAAA,EAAAA,OACRF,CACT,EAEMG,EAAc,SAACC,GAYnB,OAXAH,EAAAA,EAAAA,UAAeC,EAAAA,EAAAA,OACe,MAA1BE,EAAMJ,SAASK,OACjBC,EAAAA,EAAAA,aAA0B,+BACS,MAA1BF,EAAMJ,SAASK,QACxBC,EAAAA,EAAAA,aAA0BF,EAAMJ,SAASO,KAAKC,SAC9CP,EAAAA,EAAAA,UAAeQ,EAAAA,EAAAA,OACfR,EAAAA,EAAAA,UAAeS,EAAAA,EAAAA,QAEfJ,EAAAA,EAAAA,aAA0BF,EAAMJ,SAASO,KAAKC,UAGzC,CACT,EAEMG,EAAU,wCAwDb,OAxDa,gFACd,WAAwBC,GAAG,sEACI,OAA7BX,EAAAA,EAAAA,UAAeY,EAAAA,EAAAA,OAAc,SAChBhB,IAAAA,IACNe,EAAKhB,KACTkB,MAAK,SAACd,GACL,OAAOD,EAAeC,EACxB,IACCe,OAAM,SAACX,GACN,OAAOD,EAAYC,EACrB,IAAG,KAAD,8EACL,mDAXa,IAWb,kEACD,WAAyBQ,EAAKI,GAAQ,sEACP,OAA7Bf,EAAAA,EAAAA,UAAeY,EAAAA,EAAAA,OAAc,SAChBhB,IAAAA,KACLe,EAAKI,EAAUpB,KACpBkB,MAAK,SAACd,GACL,OAAOD,EAAeC,EACxB,IACCe,OAAM,SAACX,GAEN,OADAH,EAAAA,EAAAA,UAAeC,EAAAA,EAAAA,OACRC,EAAYC,EACrB,IAAG,KAAD,8EACL,qDAZA,IAYA,oEACD,WAA2BQ,EAAKI,GAAQ,sEACT,OAA7Bf,EAAAA,EAAAA,UAAeY,EAAAA,EAAAA,OAAc,SAChBhB,IAAAA,MACJe,EAAKI,EAAUpB,KACrBkB,MAAK,SAACd,GACL,OAAOD,EAAeC,EACxB,IACCe,OAAM,SAACX,GACN,OAAOD,EAAYC,EACrB,IAAG,KAAD,8EACL,qDAXA,IAWA,iEACD,WAAwBQ,EAAKI,GAAQ,sEACN,OAA7Bf,EAAAA,EAAAA,UAAeY,EAAAA,EAAAA,OAAc,SAChBhB,IAAAA,IACNe,EAAKI,EAAUpB,KACnBkB,MAAK,SAACd,GACL,OAAOD,EAAeC,EACxB,IACCe,OAAM,SAACX,GACN,OAAOD,EAAYC,EACrB,IAAG,KAAD,8EACL,qDAXA,IAWA,oEACD,WAA2BQ,GAAG,sEACC,OAA7BX,EAAAA,EAAAA,UAAeY,EAAAA,EAAAA,OAAc,SAChBhB,IAAAA,OACHe,EAAKhB,KACZkB,MAAK,SAACd,GACL,OAAOD,EAAeC,EACxB,IACCe,OAAM,SAACX,GACN,OAAOD,EAAYC,EACrB,IAAG,KAAD,8EACL,mDAXA,MAWA,EAxDa,GA2DhB,K,0GCxFMa,EAAkB,wCA8CrB,OA9CqB,qFACtB,WAA6BC,EAAYC,EAASC,GAAS,oGAClCT,EAAAA,EAAAA,WAAsB,gCAAD,OACVO,EAAU,YAAIC,EAAO,YAAIC,IACzD,KAAD,EAFW,GAEX,WAFOb,EAAI,EAAJA,MAGC,CAAD,eAEiD,OADvDN,EAAAA,EAAAA,UAAeoB,EAAAA,EAAAA,IAA0B,QAAR,EAACd,EAAK,UAAE,aAAP,EAASe,OAC3CrB,EAAAA,EAAAA,UAAesB,EAAAA,EAAAA,IAAoB,QAAR,EAAChB,EAAK,UAAE,OAAU,QAAV,EAAP,EAASiB,MAAM,UAAE,WAAV,EAAP,EAAmBC,QAAQ,mBAChD,GAAI,2CAEd,uDAVqB,IAUrB,wEAED,WAA+BC,GAAE,8FACRf,EAAAA,EAAAA,WAAsB,kCAAD,OACRe,IAClC,KAAD,EAFW,GAEX,WAFOnB,EAAI,EAAJA,MAGC,CAAD,eACoC,OAA1CN,EAAAA,EAAAA,UAAe0B,EAAAA,EAAAA,IAAmB,OAAJpB,QAAI,IAAJA,OAAI,EAAJA,EAAO,KAAK,mBACnC,GAAI,2CAEd,mDAVA,IAUA,wEAED,WAA+BS,GAAQ,8FACdL,EAAAA,EAAAA,YAAuB,iCAE5CK,GACA,KAAD,EAHW,GAGX,WAHOT,EAAI,EAAJA,MAIC,CAAD,eACoC,OAA1CD,EAAAA,EAAAA,eAA4BC,EAAKC,SAAS,mBACnC,GAAI,2CAEd,mDAXA,IAWA,wEAED,WAA+BkB,EAAIV,GAAQ,8FAClBL,EAAAA,EAAAA,cAAyB,kCAAD,OACXe,GAClCV,GACA,KAAD,EAHW,GAGX,WAHOT,EAAI,EAAJA,MAIC,CAAD,eACoC,OAA1CD,EAAAA,EAAAA,eAA4BC,EAAKC,SAAS,mBACnC,GAAI,2CAEd,qDAXA,IAWA,wEAED,WAA+BkB,GAAE,sFACzBf,EAAAA,EAAAA,cAAyB,kCAAD,OAAmCe,IAAM,KAAD,sCACvE,mDAJA,MAIA,EA9CqB,GAiDxB,K,kKCgEA,UA/G0B,WACxB,IAAQA,GAAOE,EAAAA,EAAAA,MAAPF,GACFG,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,WACRd,EAAAA,EAAAA,kBAAqCS,EACvC,GAAG,CAACA,IAEJ,IAEIM,EACFC,EACAC,EAJMC,GAAgBC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMF,WAAW,IAAxDA,YAKNG,GAAaC,EAAAA,EAAAA,UA8Bf,OACE,SAAC,IAAS,CAACC,OAAO,EAAMC,UAAU,eAAc,UAC9C,SAAC,IAAG,CAACA,UAAU,gCAA+B,UAC5C,SAAC,IAAG,CAACA,UAAU,2CAA0C,UACvD,SAAC,IAAI,WACH,UAAC,SAAS,YACR,oDACA,mBACA,gBACEA,UAAU,OACVC,IAAK,SAACC,GAAK,OAAML,EAAaK,CAAK,EACnCC,IAAgB,OAAXT,QAAW,IAAXA,OAAW,EAAXA,EAAaU,MAClBC,IAAI,MAEN,mBACA,UAAC,IAAI,CAACC,SAvCA,SAACC,GACjBA,EAAEC,iBACF,IAAMjC,EAAW,IAAIkC,SACrBlC,EAASmC,OAAO,OAAQnB,EAAQoB,OAE5BnB,EAASoB,MAAM,IACjBrC,EAASmC,OAAO,QAASlB,EAASoB,MAAM,IAG1CrC,EAASmC,OAAO,cAAejB,EAAekB,OAE1CE,EAAAA,EAAAA,QAAuBtB,EAAQoB,OACjC9C,EAAAA,EAAAA,aAA0B,gCACjBgD,EAAAA,EAAAA,QAAuBpB,EAAekB,OAC/C9C,EAAAA,EAAAA,aAA0B,uCAE1BW,EAAAA,EAAAA,kBAAqCS,EAAIV,GAAUF,MAAK,SAACyC,GACnDA,GACF1B,EAAS,oBAEb,GAEJ,EAiBsC,WACxB,UAAC,UAAU,CAACY,UAAU,OAAOe,UAAU,OAAM,WAC3C,SAAC,UAAU,gCACX,SAAC,YAAY,CACXC,aAAyB,OAAXtB,QAAW,IAAXA,OAAW,EAAXA,EAAauB,KAC3BhB,IAAK,SAACC,GAAK,OAAMX,EAAUW,CAAK,EAChCgB,YAAY,mBACZlB,UAAU,oBACVmB,KAAK,aAIT,UAAC,UAAU,CAACnB,UAAU,OAAOe,UAAU,QAAO,WAC5C,SAAC,UAAU,iCACX,SAAC,YAAY,CACXd,IAAK,SAACC,GAAK,OAAMV,EAAWU,CAAK,EACjCgB,YAAY,oBACZlB,UAAU,iCACVmB,KAAK,OACLC,SA9DF,SAACC,GACfxB,EAAWM,IAAMmB,IAAIC,gBAAgBF,EAAMG,OAAOZ,MAAM,GAC1D,QAgEc,mBAEA,UAAC,UAAU,CAACG,UAAU,cAAa,WACjC,SAAC,UAAU,uCACX,SAAC,YAAY,CACXC,aAAyB,OAAXtB,QAAW,IAAXA,OAAW,EAAXA,EAAa+B,YAC3BxB,IAAK,SAACC,GAAK,OAAMT,EAAiBS,CAAK,EACvCgB,YAAY,0BACZlB,UAAU,iCACV0B,GAAG,WACHC,KAAM,QAIV,SAAC,IAAM,CACLR,KAAK,SACLS,QAAQ,UACR5B,UAAU,wCAAuC,wBAKrD,4BAOd,C,8CCzHMa,EAAc,wCAWjB,OAXiB,oCAClB,SAAeF,GACb,OAAOA,EAAMkB,QAAU,CACzB,GAAC,qBACD,SAAelB,GAEb,MADiB,gDACCmB,KAAKnB,EACzB,GAAC,sBACD,SAAgBA,GAEd,MADkB,gDACCmB,KAAKnB,EAC1B,KAAC,EAXiB,GAcpB,K,yDCXM9C,EAAY,wCAUf,OAVe,2CAChB,SAAsBkE,GACpB,OAAOC,EAAAA,EAAAA,QAAkBD,EAAK,CAC5BE,SAAU,iBAEd,GAAC,0BACD,SAAoBF,GAClB,OAAOC,EAAAA,EAAAA,MAAgBD,EAAK,CAC1BE,SAAU,iBAEd,KAAC,EAVe,GAalB,K","sources":["APIRequest/RestClient.js","APIRequest/TestimonialRequest.js","components/Testimonial/TestimonialUpdate.jsx","helper/FormValidation.js","helper/ToastMessage.js"],"sourcesContent":["//External import\r\nimport axios from \"axios\";\r\nimport SessionHelper from \"../helper/SessionHelper\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport { SetLogout } from \"../redux/slices/AuthSlice\";\r\nimport { RemoveLoading, SetLoading } from \"../redux/slices/LoaderSlice\";\r\nimport { RemoveUserDetails } from \"../redux/slices/ProfileSlice\";\r\nimport store from \"../redux/store/store\";\r\n\r\n//Axios default setting\r\naxios.defaults.baseURL = \"/api/v1\";\r\naxios.defaults.headers.post[\"Content-Type\"] =\r\n  \"application/x-www-form-urlencoded\";\r\n\r\nfunction axiosHeaders() {\r\n  axios.defaults.headers.common[\"Authorization\"] =\r\n    \"Bearer \" + SessionHelper.getToken();\r\n}\r\n\r\nconst ResponseReturn = (response) => {\r\n  store.dispatch(RemoveLoading());\r\n  return response;\r\n};\r\n\r\nconst ErrorReturn = (error) => {\r\n  store.dispatch(RemoveLoading());\r\n  if (error.response.status === 500) {\r\n    ToastMessage.errorMessage(\"Sorry, Something went wrong\");\r\n  } else if (error.response.status === 401) {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n    store.dispatch(SetLogout());\r\n    store.dispatch(RemoveUserDetails());\r\n  } else {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nclass RestClient {\r\n  static async getRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .get(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async postRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .post(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        store.dispatch(RemoveLoading());\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async updateRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .patch(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async putRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .put(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async deleteRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .delete(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n}\r\n\r\nexport default RestClient;\r\n","//Internal Import\r\nimport store from \"../redux/store/store\";\r\nimport RestClient from \"./RestClient\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport {\r\n  SetTestimonial,\r\n  SetTestimonialList,\r\n  SetTotalPage,\r\n} from \"../redux/slices/TestimonialSlice\";\r\n\r\nclass TestimonialRequest {\r\n  static async TestimonialList(pageNumber, perPage, searchKey) {\r\n    const { data } = await RestClient.getRequest(\r\n      `/Testimonial/TestimonialList/${pageNumber}/${perPage}/${searchKey}`,\r\n    );\r\n    if (data) {\r\n      store.dispatch(SetTestimonialList(data[0]?.Data));\r\n      store.dispatch(SetTotalPage(data[0]?.Total[0]?.count));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async TestimonialSingle(id) {\r\n    const { data } = await RestClient.getRequest(\r\n      `/Testimonial/TestimonialSingle/${id}`,\r\n    );\r\n    if (data) {\r\n      store.dispatch(SetTestimonial(data?.[0]));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async TestimonialCreate(postBody) {\r\n    const { data } = await RestClient.postRequest(\r\n      `/Testimonial/TestimonialCreate`,\r\n      postBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async TestimonialUpdate(id, postBody) {\r\n    const { data } = await RestClient.updateRequest(\r\n      `/Testimonial/TestimonialUpdate/${id}`,\r\n      postBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async TestimonialDelete(id) {\r\n    await RestClient.deleteRequest(`/Testimonial/TestimonialDelete/${id}`);\r\n  }\r\n}\r\n\r\nexport default TestimonialRequest;\r\n","//External Lib Import\r\nimport { useRef } from \"react\";\r\nimport { Container, Col, Row, Card, Form, Button } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n//Internal Lib Import\r\nimport FormValidation from \"../../helper/FormValidation\";\r\nimport ToastMessage from \"../../helper/ToastMessage\";\r\nimport TestimonialRequest from \"../../APIRequest/TestimonialRequest\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst TestimonialUpdate = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    TestimonialRequest.TestimonialSingle(id);\r\n  }, [id]);\r\n\r\n  const { Testimonial } = useSelector((state) => state.Testimonial);\r\n\r\n  let nameRef,\r\n    imageRef,\r\n    descriptionRef,\r\n    previewRef = useRef();\r\n\r\n  const preview = (event) => {\r\n    previewRef.src = URL.createObjectURL(event.target.files[0]);\r\n  };\r\n\r\n  const CreateNew = (e) => {\r\n    e.preventDefault();\r\n    const postBody = new FormData();\r\n    postBody.append(\"Name\", nameRef.value);\r\n\r\n    if (imageRef.files[0]) {\r\n      postBody.append(\"Image\", imageRef.files[0]);\r\n    }\r\n\r\n    postBody.append(\"Description\", descriptionRef.value);\r\n\r\n    if (FormValidation.isEmpty(nameRef.value)) {\r\n      ToastMessage.errorMessage(\"Testimonial Name is Required\");\r\n    } else if (FormValidation.isEmpty(descriptionRef.value)) {\r\n      ToastMessage.errorMessage(\"Testimonial Description is Required\");\r\n    } else {\r\n      TestimonialRequest.TestimonialUpdate(id, postBody).then((result) => {\r\n        if (result) {\r\n          navigate(\"/Testimonial-list\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container fluid={true} className=\"content-body\">\r\n      <Row className=\"d-flex justify-content-center\">\r\n        <Col className=\"col-12 col-lg-8  col-sm-12 col-md-8  p-2\">\r\n          <Card>\r\n            <Card.Body>\r\n              <h4>Create New Testimonial</h4>\r\n              <br />\r\n              <img\r\n                className=\"w-20\"\r\n                ref={(input) => (previewRef = input)}\r\n                src={Testimonial?.Image}\r\n                alt=\"\"\r\n              />\r\n              <hr />\r\n              <Form onSubmit={CreateNew}>\r\n                <Form.Group className=\"mb-3\" controlId=\"Name\">\r\n                  <Form.Label>Testimonial Name</Form.Label>\r\n                  <Form.Control\r\n                    defaultValue={Testimonial?.Name}\r\n                    ref={(input) => (nameRef = input)}\r\n                    placeholder=\"Testimonial Name\"\r\n                    className=\"animated fadeInUp\"\r\n                    type=\"text\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"Image\">\r\n                  <Form.Label>Testimonial Image</Form.Label>\r\n                  <Form.Control\r\n                    ref={(input) => (imageRef = input)}\r\n                    placeholder=\"Testimonial Image\"\r\n                    className=\"form-control animated fadeInUp\"\r\n                    type=\"file\"\r\n                    onChange={preview}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <br />\r\n\r\n                <Form.Group controlId=\"Description\">\r\n                  <Form.Label>Testimonial Description</Form.Label>\r\n                  <Form.Control\r\n                    defaultValue={Testimonial?.Description}\r\n                    ref={(input) => (descriptionRef = input)}\r\n                    placeholder=\"Testimonial Description\"\r\n                    className=\"form-control animated fadeInUp\"\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"primary\"\r\n                  className=\"animated fadeInUp float-end mb-0 mt-4\"\r\n                >\r\n                  Create\r\n                </Button>\r\n              </Form>\r\n              <br />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TestimonialUpdate;\r\n","class FormValidation {\r\n  static isEmpty(value) {\r\n    return value.length <= 0;\r\n  }\r\n  static isEmail(value) {\r\n    let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    return regexEmail.test(value);\r\n  }\r\n  static isMobile(value) {\r\n    let regexMobile = /(^(\\+88|0088|88)?(01){1}[3456789]{1}(\\d){8})$/;\r\n    return regexMobile.test(value);\r\n  }\r\n}\r\n\r\nexport default FormValidation;\r\n","//external import\r\nimport cogoToast from \"cogo-toast\";\r\n\r\nclass ToastMessage {\r\n  static successMessage(msg) {\r\n    return cogoToast.success(msg, {\r\n      position: \"bottom-center\",\r\n    });\r\n  }\r\n  static errorMessage(msg) {\r\n    return cogoToast.error(msg, {\r\n      position: \"bottom-center\",\r\n    });\r\n  }\r\n}\r\n\r\nexport default ToastMessage;\r\n"],"names":["axiosHeaders","axios","SessionHelper","ResponseReturn","response","store","RemoveLoading","ErrorReturn","error","status","ToastMessage","data","message","SetLogout","RemoveUserDetails","RestClient","url","SetLoading","then","catch","postBody","TestimonialRequest","pageNumber","perPage","searchKey","SetTestimonialList","Data","SetTotalPage","Total","count","id","SetTestimonial","useParams","navigate","useNavigate","useEffect","nameRef","imageRef","descriptionRef","Testimonial","useSelector","state","previewRef","useRef","fluid","className","ref","input","src","Image","alt","onSubmit","e","preventDefault","FormData","append","value","files","FormValidation","result","controlId","defaultValue","Name","placeholder","type","onChange","event","URL","createObjectURL","target","Description","as","rows","variant","length","test","msg","cogoToast","position"],"sourceRoot":""}
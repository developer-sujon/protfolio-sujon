{"version":3,"file":"static/js/407.1b67453c.chunk.js","mappings":"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","sources":["APIRequest/ProfileRequest.js","APIRequest/RestClient.js","components/AccountRecovery/SendOtp/SendOtp.jsx","helper/FormValidation.js","helper/ToastMessage.js"],"sourcesContent":["//Internal Import\r\nimport store from \"../redux/store/store\";\r\nimport RestClient from \"./RestClient\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport { SetUserDetails } from \"../redux/slices/ProfileSlice\";\r\nimport SessionHelper from \"../helper/SessionHelper\";\r\n\r\nclass ProfileRequest {\r\n  static async UserDetails() {\r\n    const { data } = await RestClient.getRequest(\"/user/UserDetails\");\r\n    if (data) {\r\n      store.dispatch(SetUserDetails(data?.[0]));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async UserUpdate(postBody) {\r\n    const { data } = await RestClient.updateRequest(\r\n      \"/user/UserUpdate\",\r\n      postBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async UserChecgePassword(postBody) {\r\n    const { data } = await RestClient.putRequest(\r\n      \"/user/UserChangePassword\",\r\n      postBody,\r\n    );\r\n\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async SendRecoveryOtp(email) {\r\n    const { data } = await RestClient.getRequest(\r\n      `/User/SendRecoveryOtp/${email}`,\r\n    );\r\n    if (data) {\r\n      SessionHelper.setOtpEmail(email);\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async VerifyRecoveryOtp(otp) {\r\n    const { data } = await RestClient.getRequest(\r\n      `/User/VerifyRecoveryOtp/${SessionHelper.getOtpEmail()}/${otp}`,\r\n    );\r\n\r\n    if (data) {\r\n      SessionHelper.setOtpCode(otp);\r\n      ToastMessage.successMessage(data.message);\r\n      return true\r\n    }\r\n  }\r\n\r\n  static async RecoveryResetPass(Password) {\r\n    const { data } = await RestClient.postRequest(\r\n      `/User/RecoveryResetPass/${SessionHelper.getOtpEmail()}/${SessionHelper.getOtpCode()}`,\r\n      Password,\r\n    );\r\n\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ProfileRequest;\r\n","//External import\r\nimport axios from \"axios\";\r\nimport SessionHelper from \"../helper/SessionHelper\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport { SetLogout } from \"../redux/slices/AuthSlice\";\r\nimport { RemoveLoading, SetLoading } from \"../redux/slices/LoaderSlice\";\r\nimport { RemoveUserDetails } from \"../redux/slices/ProfileSlice\";\r\nimport store from \"../redux/store/store\";\r\n\r\n//Axios default setting\r\naxios.defaults.baseURL = \"/api/v1\";\r\naxios.defaults.headers.post[\"Content-Type\"] =\r\n  \"application/x-www-form-urlencoded\";\r\n\r\nfunction axiosHeaders() {\r\n  axios.defaults.headers.common[\"Authorization\"] =\r\n    \"Bearer \" + SessionHelper.getToken();\r\n}\r\n\r\nconst ResponseReturn = (response) => {\r\n  store.dispatch(RemoveLoading());\r\n  return response;\r\n};\r\n\r\nconst ErrorReturn = (error) => {\r\n  store.dispatch(RemoveLoading());\r\n  if (error.response.status === 500) {\r\n    ToastMessage.errorMessage(\"Sorry, Something went wrong\");\r\n  } else if (error.response.status === 401) {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n    store.dispatch(SetLogout());\r\n    store.dispatch(RemoveUserDetails());\r\n  } else {\r\n    ToastMessage.errorMessage(error.response.data.message);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nclass RestClient {\r\n  static async getRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .get(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async postRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .post(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        store.dispatch(RemoveLoading());\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async updateRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .patch(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async putRequest(url, postBody) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .put(url, postBody, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n  static async deleteRequest(url) {\r\n    store.dispatch(SetLoading());\r\n    return await axios\r\n      .delete(url, axiosHeaders())\r\n      .then((response) => {\r\n        return ResponseReturn(response);\r\n      })\r\n      .catch((error) => {\r\n        return ErrorReturn(error);\r\n      });\r\n  }\r\n}\r\n\r\nexport default RestClient;\r\n","//External lib Import\r\nimport { useRef } from \"react\";\r\nimport { Container, Col, Row, Card, Form, Button } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ProfileRequest from \"../../../APIRequest/ProfileRequest\";\r\n\r\n//Internal  lib import\r\nimport FormValidation from \"../../../helper/FormValidation\";\r\nimport ToastMessage from \"../../../helper/ToastMessage\";\r\n\r\nconst SendOtp = () => {\r\n  const navigate = useNavigate();\r\n  let emailRef = useRef();\r\n\r\n  const sendOtpCode = (e) => {\r\n    e.preventDefault();\r\n    if (!FormValidation.isEmail(emailRef.value)) {\r\n      ToastMessage.errorMessage(\"Invalid Email Address\");\r\n    } else {\r\n      ProfileRequest.SendRecoveryOtp(emailRef.value).then((result) => {\r\n        if (result) {\r\n          navigate(\"/verify-otp\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md={7} lg={6} style={{ marginTop: \"100px\" }}>\r\n          <Card className=\"w-90  p-4\">\r\n            <Card.Body>\r\n              <Card.Title>Email Address</Card.Title>\r\n              <Form onSubmit={sendOtpCode}>\r\n                <Form.Group className=\"mb-3\" controlId=\"passwordRef\">\r\n                  <Form.Control\r\n                    ref={(input) => (emailRef = input)}\r\n                    placeholder=\"Email Address\"\r\n                    className=\"animated fadeInUp\"\r\n                    type=\"email\"\r\n                  />\r\n                </Form.Group>\r\n                <Button\r\n                  variant=\"success\"\r\n                  type=\"submit\"\r\n                  className=\"w-100 animated fadeInUp float-end \"\r\n                >\r\n                  Next\r\n                </Button>\r\n              </Form>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SendOtp;\r\n","class FormValidation {\r\n  static isEmpty(value) {\r\n    return value.length <= 0;\r\n  }\r\n  static isEmail(value) {\r\n    let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    return regexEmail.test(value);\r\n  }\r\n  static isMobile(value) {\r\n    let regexMobile = /(^(\\+88|0088|88)?(01){1}[3456789]{1}(\\d){8})$/;\r\n    return regexMobile.test(value);\r\n  }\r\n}\r\n\r\nexport default FormValidation;\r\n","//external import\r\nimport cogoToast from \"cogo-toast\";\r\n\r\nclass ToastMessage {\r\n  static successMessage(msg) {\r\n    return cogoToast.success(msg, {\r\n      position: \"bottom-center\",\r\n    });\r\n  }\r\n  static errorMessage(msg) {\r\n    return cogoToast.error(msg, {\r\n      position: \"bottom-center\",\r\n    });\r\n  }\r\n}\r\n\r\nexport default ToastMessage;\r\n"],"names":["ProfileRequest","RestClient","data","store","SetUserDetails","postBody","ToastMessage","message","email","SessionHelper","otp","Password","axiosHeaders","axios","ResponseReturn","response","RemoveLoading","ErrorReturn","error","status","SetLogout","RemoveUserDetails","url","SetLoading","then","catch","navigate","useNavigate","emailRef","useRef","className","md","lg","style","marginTop","onSubmit","e","preventDefault","FormValidation","value","result","controlId","ref","input","placeholder","type","variant","length","test","msg","cogoToast","position"],"sourceRoot":""}